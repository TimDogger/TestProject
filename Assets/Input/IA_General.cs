//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/IA_General.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IA_General: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IA_General()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA_General"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""34e32ed6-1208-4b40-924b-6adf7e45cfa7"",
            ""actions"": [
                {
                    ""name"": ""View"",
                    ""type"": ""Value"",
                    ""id"": ""872b1c82-4d91-43e1-8a3c-cd3f50256b9c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""40f6e789-b2d7-4ca8-9af7-ceba0876d6fa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseView"",
                    ""type"": ""Value"",
                    ""id"": ""c4b89f24-ef35-45ee-aaaa-0efb84f55024"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpawnNPC"",
                    ""type"": ""Button"",
                    ""id"": ""121d28ad-2424-49dc-a4a0-604b82e666ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpawnArrow"",
                    ""type"": ""Button"",
                    ""id"": ""8ac9b160-18f7-4a9c-a0a7-9d4ebc3796cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""913d070d-d4b9-44b7-be92-a5062b377681"",
                    ""path"": ""<Gyroscope>/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Android"",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4032ebc2-073a-405b-9bd0-df8427bf4927"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""24d22e4a-10f1-4cc5-9b5d-194ec2b257d7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ea70b065-6aa3-463f-8cf7-1363fd50a4c8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1c209fc3-cac3-4bfb-a203-77c656841b48"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3b431692-010c-45db-8eb0-077d7aef6630"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a74139ee-f91c-4392-83f6-3f5eec75e9fa"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f584372-9e72-43d8-8af4-05f60f3dac6b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SpawnNPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7819d8f2-eacb-41d9-9aa2-0a7773189eee"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SpawnArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Android"",
            ""bindingGroup"": ""Android"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gyroscope>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_View = m_PlayerActions.FindAction("View", throwIfNotFound: true);
        m_PlayerActions_Movement = m_PlayerActions.FindAction("Movement", throwIfNotFound: true);
        m_PlayerActions_MouseView = m_PlayerActions.FindAction("MouseView", throwIfNotFound: true);
        m_PlayerActions_SpawnNPC = m_PlayerActions.FindAction("SpawnNPC", throwIfNotFound: true);
        m_PlayerActions_SpawnArrow = m_PlayerActions.FindAction("SpawnArrow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_View;
    private readonly InputAction m_PlayerActions_Movement;
    private readonly InputAction m_PlayerActions_MouseView;
    private readonly InputAction m_PlayerActions_SpawnNPC;
    private readonly InputAction m_PlayerActions_SpawnArrow;
    public struct PlayerActionsActions
    {
        private @IA_General m_Wrapper;
        public PlayerActionsActions(@IA_General wrapper) { m_Wrapper = wrapper; }
        public InputAction @View => m_Wrapper.m_PlayerActions_View;
        public InputAction @Movement => m_Wrapper.m_PlayerActions_Movement;
        public InputAction @MouseView => m_Wrapper.m_PlayerActions_MouseView;
        public InputAction @SpawnNPC => m_Wrapper.m_PlayerActions_SpawnNPC;
        public InputAction @SpawnArrow => m_Wrapper.m_PlayerActions_SpawnArrow;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @View.started += instance.OnView;
            @View.performed += instance.OnView;
            @View.canceled += instance.OnView;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @MouseView.started += instance.OnMouseView;
            @MouseView.performed += instance.OnMouseView;
            @MouseView.canceled += instance.OnMouseView;
            @SpawnNPC.started += instance.OnSpawnNPC;
            @SpawnNPC.performed += instance.OnSpawnNPC;
            @SpawnNPC.canceled += instance.OnSpawnNPC;
            @SpawnArrow.started += instance.OnSpawnArrow;
            @SpawnArrow.performed += instance.OnSpawnArrow;
            @SpawnArrow.canceled += instance.OnSpawnArrow;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @View.started -= instance.OnView;
            @View.performed -= instance.OnView;
            @View.canceled -= instance.OnView;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @MouseView.started -= instance.OnMouseView;
            @MouseView.performed -= instance.OnMouseView;
            @MouseView.canceled -= instance.OnMouseView;
            @SpawnNPC.started -= instance.OnSpawnNPC;
            @SpawnNPC.performed -= instance.OnSpawnNPC;
            @SpawnNPC.canceled -= instance.OnSpawnNPC;
            @SpawnArrow.started -= instance.OnSpawnArrow;
            @SpawnArrow.performed -= instance.OnSpawnArrow;
            @SpawnArrow.canceled -= instance.OnSpawnArrow;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);
    private int m_AndroidSchemeIndex = -1;
    public InputControlScheme AndroidScheme
    {
        get
        {
            if (m_AndroidSchemeIndex == -1) m_AndroidSchemeIndex = asset.FindControlSchemeIndex("Android");
            return asset.controlSchemes[m_AndroidSchemeIndex];
        }
    }
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPlayerActionsActions
    {
        void OnView(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnMouseView(InputAction.CallbackContext context);
        void OnSpawnNPC(InputAction.CallbackContext context);
        void OnSpawnArrow(InputAction.CallbackContext context);
    }
}
